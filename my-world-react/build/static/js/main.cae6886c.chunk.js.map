{"version":3,"sources":["images/eragon_1.jpg","logo.svg","images/background_paper_1.png","NavBar.js","MainPage.js","Books.js","BookWorkshop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","Navbar","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","MainPage","class","Books","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","books","isLoaded","_this2","fetch","then","res","json","setState","_this$state","CardDeck","map","book","Card","style","maxWidth","Img","src","testCover","Body","Title","name","Text","description","Footer","BookWorkshop","App","react_router_dom","src_NavBar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cae6886c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eragon_1.20615d77.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/background_paper_1.cefb7137.png\";","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavItem} from 'react-bootstrap';\n\nclass NavBar extends Component {\n\trender() {\n\t  \treturn (\n            <div>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"/\">Book World</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link href=\"/books\">Books</Nav.Link>\n                            <Nav.Link href=\"/bookWorkshop\">Book Workshop</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n    \t)\n\t}\n}\nexport default NavBar;\n","import React from 'react';\n\nfunction MainPage() {\n  return (\n    <div class=\"jumbotron\">\n        <div class=\"container\">\n          <h1 class=\"display-4\">Hello everybody!</h1>\n          <p>This is my small webpage for trying out new stuff and sharing some boring and usless content :)</p>\n        </div>\n\t</div>\n  );\n}\n\nexport default MainPage;\n","import React, {Component} from 'react';\nimport { CardDeck, Card, NavItem} from 'react-bootstrap';\nimport testCover from'./images/eragon_1.jpg';\n\nclass Books extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbooks: [],\n\t\t\tisLoaded: false,\n\t\t}\n\t}\n\t\n\tcomponentDidMount() {\n\t\tfetch('http://localhost:8080/rest/book/all-books')\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tbooks: json,\n\t\t\t\t\tisLoaded: true,\n\t\t\t\t})\n\t\t\t});\n\t}\n\t\n\trender() {\n\t\tvar { books, isLoaded } = this.state;\n\t\n\t\treturn (\n\t\t\t<div className=\"Books\">\n     \t\t\t<div class=\"jumbotron\">\n\t\t\t\t\t<div class=\"container\">\n\t\t\t        \t<h1 class=\"display-4\">My Books!</h1>\n\t\t\t\t\t\t<p>This selection of books I've read. Here I also review and rate them.</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"container\">\n\t\t\t\t  <CardDeck>\n\t\t\t\t\t  {books.map(book => (\n\t\t\t\t\t\t  <Card style={{maxWidth: '20rem'}}>\n\t\t\t\t\t\t      <Card.Img variant=\"top\" src={testCover} />\n\t\t\t\t\t\t      <Card.Body>\n\t\t\t\t\t\t          <Card.Title>{book.name}</Card.Title>\n\t\t\t\t\t\t          <Card.Text>{book.description}</Card.Text>\n\t\t\t\t\t\t      </Card.Body>\n\t\t\t\t\t\t      <Card.Footer>\n\t\t\t\t\t\t          <small className=\"text-muted\">Last updated 3 mins ago</small>\n\t\t\t\t\t\t      </Card.Footer>\n\t\t\t\t\t\t  </Card>\n\t\t\t\t\t  ))}\n\t\t\t\t  </CardDeck>\n\t\t    \t</div>\n\t\t    </div>\n\t\t  );\n\t}\n}\n\nexport default Books;\n\n\n","import React, {Component} from 'react';\n\nclass BookWorkshop extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"BookWorkshop\">\n\t\t\t\t\t<div class=\"jumbotron\">\n\t\t\t\t\t\t<div class=\"container\">\n\t\t\t\t        \t<h1 class=\"display-3\">My Books!</h1>\n\t\t\t\t\t\t\t<p>This selection of books I've read. Here I also review and rate them.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t    </div>\n\t\t  );\n\t}\n}\n\nexport default BookWorkshop;\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './MainPage';\nimport NavBar from './NavBar';\nimport Books from './Books';\nimport BookWorkshop from './BookWorkshop';\nimport { render } from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport background from'./images/background_paper_1.png';\n\n/**\n * Constants for the paths. \n * Use them for the routes.\n */\nconst booksRoute = \"/books\";\nconst bookWorkshopRoute = \"/bookWorkshop\";\n\nconst App = () => (\n  <BrowserRouter>\n    <div>\n\t  <NavBar />    \n      <Route exact path=\"/\" component={MainPage} />\n      <Route path={booksRoute} component={Books} />\n      <Route path={bookWorkshopRoute} component={BookWorkshop} />\n    </div>\n  </BrowserRouter>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NavBar from './NavBar';\nimport App from './App';\nimport MainPage from './MainPage';\nimport Books from './Books';\nimport { BrowserRouter} from 'react-router-dom';\nimport { Route, IndexRoute } from 'react-router';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change \n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}